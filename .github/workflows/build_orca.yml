on:
    workflow_call:
      inputs:
        cache-key:
          required: true
          type: string
        cache-path:
          required: true
          type: string
        os:
          required: true
          type: string
        arch:
          required: false
          type: string

jobs:
  build_orca:
    name: Build OrcaSlicer
    runs-on: ${{ inputs.os }}
    env:
      date: ""
      ver: ""
      ver_pure: ""
      ORCA_UPDATER_SIG_KEY: ${{ secrets.ORCA_UPDATER_SIG_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          lfs: 'true'

      - name: load cached deps
        uses: actions/cache@v4
        with:
          path: ${{ inputs.cache-path }}
          key: ${{ inputs.cache-key }}
          fail-on-cache-miss: true

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.28.0"  # use most recent 3.28.x version

      - name: Get the version and date on Ubuntu and macOS
        if: inputs.os != 'windows-latest'
        run: |
          ver_pure=$(grep 'set(SoftFever_VERSION' version.inc | cut -d '"' -f2)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ver="PR-${{ github.event.number }}"
            git_commit_hash="${{ github.event.pull_request.head.sha }}"
          else
            ver=V$ver_pure
            git_commit_hash=""
          fi
          echo "ver=$ver" >> $GITHUB_ENV
          echo "ver_pure=$ver_pure" >> $GITHUB_ENV
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "git_commit_hash=$git_commit_hash" >> $GITHUB_ENV
        shell: bash

      - name: Get the version and date on Windows
        if: inputs.os == 'windows-latest'
        run: |
          $date = Get-Date -Format 'yyyyMMdd'
          $ref = "${{ github.ref }}"
          $eventName = "${{ github.event_name }}"
          $prNumber = "${{ github.event.number }}"

          if ($eventName -eq 'pull_request') {
              $ver = "PR" + $prNumber
              $git_commit_hash = "${{ github.event.pull_request.head.sha }}"
          } else {
              $versionContent = Get-Content version.inc -Raw
              if ($versionContent -match 'set\(SoftFever_VERSION "(.*?)"\)') {
                  $ver = $matches[1]
              }
              $ver = "V$ver"
              $git_commit_hash = ""
          }

          echo "ver=$ver" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "date=$date" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "git_commit_hash=$git_commit_hash" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "date: ${{ env.date }} version: ${{ env.ver }}"
        shell: pwsh

#   Mac
      - name: Install tools mac
        if: inputs.os == 'macos-14'
        run: |
          brew install libtool
          brew list
          mkdir -p ${{ github.workspace }}/deps/build

      - name: Free disk space
        if: inputs.os == 'macos-14'
        run: |
          df -hI /dev/disk3s1s1
          sudo find /Applications -maxdepth 1 -type d -name "Xcode_*.app" ! -name "Xcode_15.4.app" -exec rm -rf {} +
          sudo rm -rf ~/Library/Developer/CoreSimulator/Caches/*
          df -hI /dev/disk3s1s1

      - name: Build slicer mac
        if: inputs.os == 'macos-14'
        working-directory: ${{ github.workspace }}
        run: |
          ./build_release_macos.sh -s -n -x -a universal -t 10.15 -1

      - name: Add some waiting Time to avoid issues when creating DMG
        if: ${{ inputs.os == 'macos-14' }}
        run: sleep 30

      - name: Detach OrcaSlicer volume if mounted
        if: ${{ inputs.os == 'macos-14' }}
        run: hdiutil detach /Volumes/OrcaSlicer || true

      - name: Remove existing DMG if present
        if: ${{ inputs.os == 'macos-14' }}
        run: rm -f OrcaSlicer_Mac_universal_${{ env.ver }}.dmg

      - name: Wait for resources to be freed
        if: ${{ inputs.os == 'macos-14' }}
        run: sleep 30

      - name: Create DMG without notary
        if: inputs.os == 'macos-14'
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p ${{ github.workspace }}/build/universal/OrcaSlicer_dmg
          rm -rf ${{ github.workspace }}/build/universal/OrcaSlicer_dmg/*
          cp -R ${{ github.workspace }}/build/universal/OrcaSlicer/OrcaSlicer.app ${{ github.workspace }}/build/universal/OrcaSlicer_dmg/
          ln -sfn /Applications ${{ github.workspace }}/build/universal/OrcaSlicer_dmg/Applications
          hdiutil create -volname "OrcaSlicer" -srcfolder ${{ github.workspace }}/build/universal/OrcaSlicer_dmg -ov -format UDZO OrcaSlicer_Mac_universal_${{ env.ver }}.dmg

          # Create separate OrcaSlicer_profile_validator DMG if the app exists
          if [ -f "${{ github.workspace }}/build/universal/OrcaSlicer/OrcaSlicer_profile_validator.app/Contents/MacOS/OrcaSlicer_profile_validator" ]; then
            mkdir -p ${{ github.workspace }}/build/universal/OrcaSlicer_profile_validator_dmg
            rm -rf ${{ github.workspace }}/build/universal/OrcaSlicer_profile_validator_dmg/*
            cp -R ${{ github.workspace }}/build/universal/OrcaSlicer/OrcaSlicer_profile_validator.app ${{ github.workspace }}/build/universal/OrcaSlicer_profile_validator_dmg/
            ln -sfn /Applications ${{ github.workspace }}/build/universal/OrcaSlicer_profile_validator_dmg/Applications
            hdiutil create -volname "OrcaSlicer Profile Validator" -srcfolder ${{ github.workspace }}/build/universal/OrcaSlicer_profile_validator_dmg -ov -format UDZO OrcaSlicer_profile_validator_Mac_universal_${{ env.ver }}.dmg
          fi

      - name: List Build Dir
        if: inputs.os == 'macos-14'
        shell: bash
        run: ls -R ${{ github.workspace }}

      - name: Upload artifacts mac
        if: inputs.os == 'macos-14'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_Mac_universal_${{ env.ver }}
          path: ${{ github.workspace }}/OrcaSlicer_Mac_universal_${{ env.ver }}.dmg

      - name: Upload OrcaSlicer_profile_validator DMG mac
        if: inputs.os == 'macos-14'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_profile_validator_Mac_universal_DMG
          path: ${{ github.workspace }}/OrcaSlicer_profile_validator_Mac_universal_${{ env.ver }}.dmg
          if-no-files-found: ignore

      - name: Deploy Mac release
        if: inputs.os == 'macos-14'
        uses: WebFreak001/deploy-nightly@v3.2.0
        with:
          upload_url: https://uploads.github.com/repos/NanashiTheNameless/OrcaSlicer/releases/242055857/assets{?name,label}
          release_id: 242055857
          asset_path: ${{ github.workspace }}/OrcaSlicer_Mac_universal_${{ env.ver }}.dmg
          asset_name: OrcaSlicer_Mac_universal_nightly.dmg
          asset_content_type: application/octet-stream
          max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted

      - name: Deploy Mac OrcaSlicer_profile_validator DMG release
        if: inputs.os == 'macos-14'
        uses: WebFreak001/deploy-nightly@v3.2.0
        with:
          upload_url: https://uploads.github.com/repos/NanashiTheNameless/OrcaSlicer/releases/242055857/assets{?name,label}
          release_id: 242055857
          asset_path: ${{ github.workspace }}/OrcaSlicer_profile_validator_Mac_universal_${{ env.ver }}.dmg
          asset_name: OrcaSlicer_profile_validator_Mac_universal_nightly.dmg
          asset_content_type: application/octet-stream
          max_releases: 1

# Windows
      - name: setup MSVC
        if: inputs.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v2

      - name: Install nsis
        if: inputs.os == 'windows-latest'
        run: |
          dir "C:/Program Files (x86)/Windows Kits/10/Include"
          choco install nsis

      - name: Build slicer Win
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        env:
          WindowsSdkDir: 'C:\Program Files (x86)\Windows Kits\10\'
          WindowsSDKVersion: '10.0.26100.0\'
        run: .\build_release_vs2022.bat slicer

      - name: Create installer Win
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        run: |
          cpack -G NSIS

      - name: Pack app
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" a -tzip OrcaSlicer_Windows_${{ env.ver }}_portable.zip ${{ github.workspace }}/build/OrcaSlicer'

      - name: Pack PDB
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build/src/Release
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" a -m0=lzma2 -mx9 Debug_PDB_${{ env.ver }}_for_developers_only.7z  *.pdb'

      - name: List Build Dir
        if: inputs.os == 'windows-latest'
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -Force "$Env:GITHUB_WORKSPACE\build" | Format-List -Property FullName,Length,LastWriteTime

      - name: Upload artifacts Win zip
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_Windows_${{ env.ver }}_portable
          path: ${{ github.workspace }}/build/OrcaSlicer

      - name: Upload artifacts Win installer
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_Windows_${{ env.ver }}
          path: ${{ github.workspace }}/build/OrcaSlicer*.exe

      - name: Upload artifacts Win PDB
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: PDB
          path: ${{ github.workspace }}/build/src/Release/Debug_PDB_${{ env.ver }}_for_developers_only.7z

      - name: Upload OrcaSlicer_profile_validator Win
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_profile_validator_Windows_${{ env.ver }}
          path: ${{ github.workspace }}/build/src/Release/OrcaSlicer_profile_validator.exe

      - name: Deploy Windows release portable
        if: inputs.os == 'windows-latest'
        uses: WebFreak001/deploy-nightly@v3.2.0
        with:
          upload_url: https://uploads.github.com/repos/NanashiTheNameless/OrcaSlicer/releases/242055857/assets{?name,label}
          release_id: 242055857
          asset_path: ${{ github.workspace }}/build/OrcaSlicer_Windows_${{ env.ver }}_portable.zip
          asset_name: OrcaSlicer_Windows_portable_nightly.zip
          asset_content_type: application/x-zip-compressed
          max_releases: 1

      - name: Deploy Windows release installer
        if: inputs.os == 'windows-latest'
        uses: WebFreak001/deploy-nightly@v3.2.0
        with:
          upload_url: https://uploads.github.com/repos/NanashiTheNameless/OrcaSlicer/releases/242055857/assets{?name,label}
          release_id: 242055857
          asset_path: ${{ github.workspace }}/build/OrcaSlicer_Windows_Installer_${{ env.ver }}.exe
          asset_name: OrcaSlicer_Windows_Installer_nightly.exe
          asset_content_type: application/x-msdownload
          max_releases: 1

      - name: Deploy Windows OrcaSlicer_profile_validator release
        if: inputs.os == 'windows-latest'
        uses: WebFreak001/deploy-nightly@v3.2.0
        with:
          upload_url: https://uploads.github.com/repos/NanashiTheNameless/OrcaSlicer/releases/242055857/assets{?name,label}
          release_id: 242055857
          asset_path: ${{ github.workspace }}/build/src/Release/OrcaSlicer_profile_validator.exe
          asset_name: OrcaSlicer_profile_validator_Windows_nightly.exe
          asset_content_type: application/x-msdownload
          max_releases: 1

# Ubuntu
      - name: Apt-Install Dependencies
        if: inputs.os == 'ubuntu-22.04' || inputs.os == 'ubuntu-24.04'
        uses: ./.github/actions/apt-install-deps

      - name: Build slicer and tests
        if: inputs.os == 'ubuntu-22.04' || inputs.os == 'ubuntu-24.04'
        shell: bash
        env:
          ubuntu-ver-str: ${{ (inputs.os == 'ubuntu-22.04' && '_Ubuntu2204') || (inputs.os == 'ubuntu-24.04' && '_Ubuntu2404') || '' }}
        run: |
          ./build_linux.sh -istr
          mv -n ./build/OrcaSlicer_Linux_V${{ env.ver_pure }}.AppImage ./build/OrcaSlicer_Linux_AppImage${{ env.ubuntu-ver-str }}_nightly.AppImage
          chmod +x ./build/OrcaSlicer_Linux_AppImage${{ env.ubuntu-ver-str }}_nightly.AppImage
          tar -cvpf build_tests.tar build/tests

      - name: List Build Dir
        if: inputs.os == 'ubuntu-22.04' || inputs.os == 'ubuntu-24.04'
        shell: bash
        run: ls -R build

      - name: Upload Test Artifact
        if: inputs.os == 'ubuntu-22.04' || inputs.os == 'ubuntu-24.04'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.sha }}-tests-${{ env.ubuntu-ver-str }}
          overwrite: true
          path: build_tests.tar
          retention-days: 5
          if-no-files-found: error

      - name: Build orca_custom_preset_tests
        if: (inputs.os == 'ubuntu-22.04' || inputs.os == 'ubuntu-24.04')
        working-directory: ${{ github.workspace }}/build/src/Release
        shell: bash
        run: |
          ./OrcaSlicer_profile_validator -p ${{ github.workspace }}/resources/profiles -g 1
          cd ${{ github.workspace }}/resources/profiles
          zip -r orca_custom_preset_tests.zip user/

      - name: Upload artifacts Ubuntu
        if: ${{ inputs.os == 'ubuntu-22.04' || inputs.os == 'ubuntu-24.04' }}
        env:
          ubuntu-ver: ${{ (inputs.os == 'ubuntu-22.04' && '2204') || (inputs.os == 'ubuntu-24.04' && '2404') || '' }}
          ubuntu-ver-str: ${{ (inputs.os == 'ubuntu-22.04' && '_Ubuntu2204') || (inputs.os == 'ubuntu-24.04' && '_Ubuntu2404') || '' }}
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_Linux_ubuntu${{ env.ubuntu-ver }}_${{ env.ver }}
          path: './build/OrcaSlicer_Linux_AppImage${{ env.ubuntu-ver-str }}_nightly.AppImage'

      - name: Upload OrcaSlicer_profile_validator Ubuntu
        if: ${{ inputs.os == 'ubuntu-22.04' || inputs.os == 'ubuntu-24.04' }}
        env:
          ubuntu-ver: ${{ (inputs.os == 'ubuntu-22.04' && '2204') || (inputs.os == 'ubuntu-24.04' && '2404') || '' }}
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_profile_validator_Linux_ubuntu_${{ env.ubuntu-ver }}_${{ env.ver }}
          path: './build/src/Release/OrcaSlicer_profile_validator'

      - name: Deploy Ubuntu release
        if: ${{ (inputs.os == 'ubuntu-22.04' || inputs.os == 'ubuntu-24.04') }}
        env:
          ubuntu-ver-str: ${{ (inputs.os == 'ubuntu-22.04' && '_Ubuntu2204') || (inputs.os == 'ubuntu-24.04' && '_Ubuntu2404') || '' }}
        uses: WebFreak001/deploy-nightly@v3.2.0
        with:
          upload_url: https://uploads.github.com/repos/NanashiTheNameless/OrcaSlicer/releases/242055857/assets{?name,label}
          release_id: 242055857
          asset_path: './build/OrcaSlicer_Linux_AppImage${{ env.ubuntu-ver-str }}_nightly.AppImage'
          asset_name: OrcaSlicer_Linux_AppImage${{ env.ubuntu-ver-str }}_nightly.AppImage
          asset_content_type: application/octet-stream
          max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted

      - name: Deploy Ubuntu OrcaSlicer_profile_validator release
        if: ${{ (inputs.os == 'ubuntu-22.04' || inputs.os == 'ubuntu-24.04') }}
        env:
          ubuntu-ver-str: ${{ (inputs.os == 'ubuntu-22.04' && '_Ubuntu2204') || (inputs.os == 'ubuntu-24.04' && '_Ubuntu2404') || '' }}
        uses: WebFreak001/deploy-nightly@v3.2.0
        with:
          upload_url: https://uploads.github.com/repos/NanashiTheNameless/OrcaSlicer/releases/242055857/assets{?name,label}
          release_id: 242055857
          asset_path: ./build/src/Release/OrcaSlicer_profile_validator
          asset_name: OrcaSlicer_profile_validator_Linux${{ env.ubuntu-ver-str }}
          asset_content_type: application/octet-stream
          max_releases: 1

      - name: Deploy orca_custom_preset_tests
        if: ${{ inputs.os == 'ubuntu-24.04' }}
        uses: WebFreak001/deploy-nightly@v3.2.0
        with:
          upload_url: https://uploads.github.com/repos/NanashiTheNameless/OrcaSlicer/releases/242055857/assets{?name,label}
          release_id: 242055857
          asset_path: '${{ github.workspace }}/resources/profiles/orca_custom_preset_tests.zip'
          asset_name: orca_custom_preset_tests.zip
          asset_content_type: application/octet-stream
          max_releases: 1

      - name: Update release tag
        if: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'push') && (inputs.os == 'ubuntu-24.04') }}
        uses: NanashiTheNameless/action-create-tag@main
        with:
          tag: "Nightly-Rolling"
          tag_exists_error: false
          force_push_tag: true
          message: "Nightly-Rolling"
          github_token: ${{ secrets.GH_TOKEN }}
